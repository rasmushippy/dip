//Заполнение ячейки "День недели"
&НаСервере
Функция ДеньНеделиПрописью(НомерДняНедели)
	Если НомерДняНедели=1 тогда
		Возврат "Понедельник";
	КонецЕсли;
	Если НомерДняНедели=2 тогда
		Возврат "Вторник";
	КонецЕсли;
	Если НомерДняНедели=3 тогда
		Возврат "Среда";
	КонецЕсли;
	Если НомерДняНедели=4 тогда
		Возврат "Четверг";
	КонецЕсли;
	Если НомерДняНедели=5 тогда
		Возврат "Пятница";
	КонецЕсли;
	Если НомерДняНедели=6 тогда
		Возврат "Суббота";
	КонецЕсли;
	Если НомерДняНедели=7 тогда
		Возврат "Воскресенье";
	КонецЕсли;
КонецФункции
//Конец заполнения ячейки "День недели"

//Размещение занятия
&НаСервере
Функция РазместитьЗанятие (Дата,НомерДняНедели,НомерПары,Выборка,Аудитория)
	Занятие = Объект.Авторасписание.Добавить();
	Занятие.Дата = Дата;
	Занятие.ДеньНедели = ДеньНеделиПрописью(НомерДняНедели);
	Занятие.НомерПары = НомерПары;
	Занятие.УчебнаяГруппа = Выборка.УчебнаяГруппа;
	Занятие.Дисциплина = Выборка.Дисциплина;
	Занятие.Преподаватель = Выборка.Преподаватель;
	Занятие.Аудитория = Аудитория;
	Возврат 1
КонецФункции
//Конец размещения занятия


//Выбор аудитории
&НаСервере
Функция ВыбратьАудиторию (Выборка,Дата,НомерДняНедели,НомерПары)
	Для каждого Аудитория из Выборка.Дисциплина.ПодходящиеАудитории цикл
		ДоступностьАудитории = 1;
		Для каждого ТекСтрокаАудитории из Объект.Авторасписание цикл									
			Если ТекСтрокаАудитории.Аудитория=ТекСтрокаАудитории тогда
				ДоступностьАудитории = 0;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ДоступностьАудитории = 1 тогда
			//Размещение занятия и выход из поиска аудитории
			РазмещениеЗанятия = РазместитьЗанятие(Дата,НомерДняНедели,НомерПары,Выборка,Аудитория.Аудитория);
			Прервать;
		КонецЕсли;								
	КонецЦикла;
	Возврат 1;
КонецФункции
//КонецВыбораАудитории

//Проверка доступности участников занятия
&НаСервере
Функция ПроверитьДоступность (Дата,НомерПары,Выборка)
	Доступность = 1;
	Для каждого ТекСтрокаАвторасписание из Объект.Авторасписание цикл
		Если ТекСтрокаАвторасписание.Дата = Дата
			и ТекСтрокаАвторасписание.НомерПары = НомерПары  тогда
			Если ТекСтрокаАвторасписание.УчебнаяГруппа = Выборка.УчебнаяГруппа
				или ТекСтрокаАвторасписание.Преподаватель = Выборка.Преподаватель тогда
				Доступность = 0;
				Прервать;   								
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если Доступность = 1 тогда
		Возврат 1;
	КонецЕсли;
КонецФункции
//Конец проверки доступности участников занятия
//Автоматическое создание расписания

//Часть выполняемая насервере
//запрос на стороне клиента не выполняется
&НаСервере
Процедура СформироватьНаСервере()
	//Выборка данных из регистра накоплений "Фонд учебной нагрузки"
	Запрос = Новый Запрос;
	Запрос.Текст = 
		 "ВЫБРАТЬ
	 	|	ФондУчебнойНагрузкиОстатки.УчебнаяГруппа КАК УчебнаяГруппа,
	 	|	ФондУчебнойНагрузкиОстатки.Дисциплина КАК Дисциплина,
	 	|	ФондУчебнойНагрузкиОстатки.Преподаватель КАК Преподаватель,
	 	|	ФондУчебнойНагрузкиОстатки.ВсегоЧасов1Остаток,
	 	|	ФондУчебнойНагрузкиОстатки.Деления1Остаток,
	 	|	ФондУчебнойНагрузкиОстатки.ВсегоЧасов2Остаток,
	 	|	ФондУчебнойНагрузкиОстатки.Деления2Остаток
	 	|ИЗ
	 	|	РегистрНакопления.ФондУчебнойНагрузки.Остатки КАК ФондУчебнойНагрузкиОстатки
	 	|
	 	|УПОРЯДОЧИТЬ ПО
	 	|	УчебнаяГруппа,
	 	|	Дисциплина,
	 	|	Преподаватель";
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаИзРезультата = РезультатЗапроса.Выбрать();
	//Конец выборки данных из регистра накоплений

	//Формирование расписания

	//Создание генератора случаных чисел
	ГСЧ = Новый ГенераторСлучайныхЧисел();
	
	// 1 Выбор по очереди каждой записи из фонда учебной нагрузки
	Пока ВыборкаИзРезультата.Следующий() цикл		
		
		//Определение первого и последнего учебного дня в полугодии, и количество дней и учебных часов в полугодии
		
		//Первое полугодие
		ПервыйДень1 = НачалоДня(ВыборкаИзРезультата.УчебнаяГруппа.ДатаНачалаПервогоПолугодия);
		ПоследнийДень1 = НачалоДня(ВыборкаИзРезультата.УчебнаяГруппа.ДатаОкончанияПервогоПолугодия);
		Часов1 = ВыборкаИзРезультата.ВсегоЧасов1Остаток;
		КоличествоДней1 = (ПоследнийДень1 - ПервыйДень1) / 86400;
		//Второе полугодие
		ПервыйДень2 = НачалоДня(ВыборкаИзРезультата.УчебнаяГруппа.ДатаНачалаВторогоПолугодия);
		ПоследнийДень2 = НачалоДня(ВыборкаИзРезультата.УчебнаяГруппа.ДатаОкончанияВторогоПолугодия);				
		Часов2 = ВыборкаИзРезультата.ВсегоЧасов2Остаток;
		КоличествоДней2 = (ПоследнийДень2 - ПервыйДень2) / 86400;
		
		// 2 Разбитие указанной суммы часов на отдельные занятия для обработки размещения каждоой в отдельности
		//   Сначала для первого полугодия затем для второго
		
		//Первое полугодие
		Для СчётчикКоличестваЗанятий = 1 по Часов1/2 цикл
			
			//Начало поиска свободной пары для занятия			
			
			//Поиск свободной пары будет продолжаться пока она не будет найдена и переменная Размещение занятия не станет равна нулю
			РазмещениеЗанятия = 0;			
			Пока РазмещениеЗанятия = 0 цикл
			
				//Здесь генерируется случайное число, которое впоследствии будет прибавляться к дате начала периодов
				//обучения для случайного выбора дня проведения занятий			
				СЧ = ГСЧ.СлучайноеЧисло(0,КоличествоДней1);
			
				//Выбор даты занятия
				ДатаЗанятия = НачалоДня(ВыборкаИзРезультата.УчебнаяГруппа.ДатаНачалаПервогоПолугодия) + СЧ * 86400;
				
				//Определение дня недели и проверка на допустимость
				НомерДняНедели = ДеньНедели(ДатаЗанятия);
				Если НомерДняНедели<7 тогда
					
					//Выбор номера пары
					Для НомерПары = 1 по 4 цикл						
						//Проверка пары на доступность участников занятия
						ДоступностьУчастников = 1;						
						ДоступностьУчастников = ПроверитьДоступность(ДатаЗанятия,НомерПары,ВыборкаИзРезультата);
						Если ДоступностьУчастников = 1 тогда
							//Если группа и преподаватель свободны, тогда производится проверка доступности аудитории
							РазмещениеЗанятия = ВыбратьАудиторию(ВыборкаИзРезультата,ДатаЗанятия,НомерДняНедели,НомерПары);
						    Прервать;
						КонецЕсли;
					КонецЦикла;
					//Конец выбора номера пары и его проверки										
					//Если занятие размещено выход на размещение следующего занятия
				КонецЕсли;	
				//Конец выбора дня недели			
			КонецЦикла;
			//Конец поиска свободной пары
			
		КонецЦикла;
		
	КонецЦикла;
	
//Конец формирования расписания
КонецПроцедуры
//Конец выполнения на сервере
	
//Выполнение на стороне клиента
//Кнопка на стороне сервера не реагирует
&НаКлиенте
Процедура Сформировать(Команда)
	СформироватьНаСервере();	   			
КонецПроцедуры
//Конец выполнения на клиенте

//Конец создания автоматического расписания